#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏ –¥–ª—è Catalog Master (CommonJS)
 * 
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/setup-dev.cjs
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    cyan: '\x1b[36m'
};

class DevSetup {
    constructor() {
        this.isWindows = os.platform() === 'win32';
        this.projectRoot = path.resolve(__dirname, '..');
        this.errors = [];
        this.warnings = [];
    }

    log(message, color = 'reset') {
        console.log(`${colors[color]}${message}${colors.reset}`);
    }

    error(message) {
        this.log(`‚ùå ${message}`, 'red');
        this.errors.push(message);
    }

    warning(message) {
        this.log(`‚ö†Ô∏è  ${message}`, 'yellow');
        this.warnings.push(message);
    }

    success(message) {
        this.log(`‚úÖ ${message}`, 'green');
    }

    info(message) {
        this.log(`‚ÑπÔ∏è  ${message}`, 'blue');
    }

    async run() {
        this.log('\nüöÄ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏ Catalog Master\n', 'cyan');

        try {
            await this.checkPrerequisites();
            await this.setupDirectories();
            await this.createConfigFiles();
            await this.finalChecks();
            
            this.showSummary();
        } catch (error) {
            this.error(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            process.exit(1);
        }
    }

    async checkPrerequisites() {
        this.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...', 'bright');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
        try {
            const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
            this.success(`Node.js: ${nodeVersion}`);
        } catch (error) {
            this.error('Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
        try {
            const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
            this.success(`npm: ${npmVersion}`);
        } catch (error) {
            this.error('npm –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        const files = ['package.json', 'catalog-master.php'];
        files.forEach(file => {
            if (fs.existsSync(path.join(this.projectRoot, file))) {
                this.success(`–§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: ${file}`);
            } else {
                this.error(`–§–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π: ${file}`);
            }
        });
    }

    async setupDirectories() {
        this.log('\nüìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...', 'bright');

        const dirs = [
            'logs',
            'temp',
            'tests/tmp',
            'tests/logs',
            'docs/dev'
        ];

        dirs.forEach(dir => {
            const fullPath = path.join(this.projectRoot, dir);
            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath, { recursive: true });
                this.success(`–°—Ç–≤–æ—Ä–µ–Ω–æ: ${dir}`);
            } else {
                this.info(`–Ü—Å–Ω—É—î: ${dir}`);
            }
        });
    }

    async createConfigFiles() {
        this.log('\n‚öôÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...', 'bright');

        // .env —Ñ–∞–π–ª
        this.createEnvFile();

        // WordPress –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        this.createWordPressConfig();
    }

    createEnvFile() {
        const envContent = `# Catalog Master Development Environment
NODE_ENV=development
CATALOG_MASTER_DEBUG=true

# WordPress Database
DB_NAME=wordpress_dev
DB_USER=root
DB_PASSWORD=
DB_HOST=localhost

# Development URLs
DEV_URL=http://localhost/wordpress
VITE_DEV_SERVER=http://localhost:5173

# Paths
XAMPP_PATH=C:\\xampp
PHP_PATH=C:\\xampp\\php\\php.exe
WP_PATH=C:\\xampp\\htdocs\\wordpress
`;

        const envPath = path.join(this.projectRoot, '.env.example');
        if (!fs.existsSync(envPath)) {
            fs.writeFileSync(envPath, envContent);
            this.success('–°—Ç–≤–æ—Ä–µ–Ω–æ .env.example');
        } else {
            this.info('.env.example –≤–∂–µ —ñ—Å–Ω—É—î');
        }
    }

    createWordPressConfig() {
        const configContent = `<?php
/**
 * WordPress –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ Catalog Master
 */

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
define('DB_NAME', 'wordpress_dev');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_HOST', 'localhost');
define('DB_CHARSET', 'utf8mb4');
define('DB_COLLATE', '');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–µ–±–∞–≥—É
define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true);
define('WP_DEBUG_DISPLAY', false);
define('SCRIPT_DEBUG', true);
define('SAVEQUERIES', true);

// Catalog Master –¥–µ–±–∞–≥
define('CATALOG_MASTER_DEBUG', true);

// –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
ini_set('memory_limit', '512M');
ini_set('max_execution_time', 300);

// –ü—Ä–µ—Ñ—ñ–∫—Å —Ç–∞–±–ª–∏—Ü—å
$table_prefix = 'wp_';

// –ê–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
if (!defined('ABSPATH')) {
    define('ABSPATH', __DIR__ . '/');
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è WordPress
require_once ABSPATH . 'wp-settings.php';
`;

        const docsDir = path.join(this.projectRoot, 'docs');
        if (!fs.existsSync(docsDir)) {
            fs.mkdirSync(docsDir, { recursive: true });
        }

        const configPath = path.join(docsDir, 'wp-config-dev.php');
        if (!fs.existsSync(configPath)) {
            fs.writeFileSync(configPath, configContent);
            this.success('–°—Ç–≤–æ—Ä–µ–Ω–æ docs/wp-config-dev.php');
        } else {
            this.info('docs/wp-config-dev.php –≤–∂–µ —ñ—Å–Ω—É—î');
        }
    }

    async finalChecks() {
        this.log('\nüîç –§—ñ–Ω–∞–ª—å–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...', 'bright');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        if (fs.existsSync(path.join(this.projectRoot, 'node_modules'))) {
            this.success('npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
        } else {
            this.warning('npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm install');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Vite –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if (fs.existsSync(path.join(this.projectRoot, 'vite.config.js'))) {
            this.success('Vite –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞');
        } else {
            this.warning('vite.config.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    showSummary() {
        this.log('\nüìã –ü—ñ–¥—Å—É–º–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', 'bright');

        if (this.errors.length === 0) {
            this.success('‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ —Ä–æ–∑—Ä–æ–±–∫–∏ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!');
        } else {
            this.error(`‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${this.errors.length} –ø–æ–º–∏–ª–æ–∫:`);
            this.errors.forEach(error => this.log(`   ‚Ä¢ ${error}`, 'red'));
        }

        if (this.warnings.length > 0) {
            this.warning(`‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ ${this.warnings.length} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å:`);
            this.warnings.forEach(warning => this.log(`   ‚Ä¢ ${warning}`, 'yellow'));
        }

        this.log('\nüöÄ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:', 'cyan');
        this.log('1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: npm install');
        this.log('2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å XAMPP (Apache + MySQL)');
        this.log('3. –°—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö wordpress_dev');
        this.log('4. –°–∫–æ–ø—ñ—é–π—Ç–µ docs/wp-config-dev.php —É WordPress');
        this.log('5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–∫—É: npm run dev\n');
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const setup = new DevSetup();
    setup.run().catch(console.error);
}

module.exports = DevSetup; 