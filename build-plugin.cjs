#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const archiver = require('archiver');
const { execSync } = require('child_process');

class WordPressPluginBuilder {
    constructor() {
        this.pluginName = 'catalog-master';
        this.version = '1.1.5';
        this.outputDir = './dist';
        this.sourceDir = './';
        
        // –§–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è –≤ –∞—Ä—Ö—ñ–≤
        this.includeFiles = [
            'catalog-master.php',
            'README.md'
        ];
        
        // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ (–≤–∫–ª—é—á–∞—é—Ç—å—Å—è —è–∫—â–æ —ñ—Å–Ω—É—é—Ç—å)
        this.optionalFiles = [
            'CHANGELOG.md'
        ];
        
        this.includeDirs = [
            'includes',
            'assets/dist'  // –¢—ñ–ª—å–∫–∏ –∑—ñ–±—Ä–∞–Ω—ñ Vite —Ñ–∞–π–ª–∏
        ];
        
        // –§–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
        this.excludePatterns = [
            'node_modules',
            '.git',
            '.gitignore',
            '.gitattributes',
            'build-plugin.js',
            'package.json',
            'package-lock.json',
            'vite.config.js',
            'vendor',
            './dist',              // –í–∏–∫–ª—é—á–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–Ω–µ–≤—É –ø–∞–ø–∫—É dist
            'docs',
            '.DS_Store',
            'Thumbs.db',
            '.env',
            'ide-helper.php',
            'assets/src',        // –í–∏–∫–ª—é—á–∏—Ç–∏ src —Ñ–∞–π–ª–∏
            'VITE_MIGRATION_PLAN.md',
            'VITE_SETUP_INSTRUCTIONS.md',
            'VITE_MIGRATION_COMPLETE.md',
            'hot'               // Vite hot file
        ];
        
        // Patterns for file extensions
        this.excludeExtensions = ['.log', '.map'];  // –í–∏–∫–ª—é—á–∏—Ç–∏ map —Ñ–∞–π–ª–∏
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫
    init() {
        console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–±—ñ—Ä–∫–∏ –ø–ª–∞–≥—ñ–Ω–∞ WordPress...\n');
        
        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É dist —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É ${this.outputDir}`);
        }
    }

    // –ó–∞–ø—É—Å–∫ Vite –∑–±—ñ—Ä–∫–∏
    runViteBuild() {
        console.log('üîß –ó–∞–ø—É—Å–∫ Vite –∑–±—ñ—Ä–∫–∏...');
        try {
            execSync('npm run build', { stdio: 'inherit' });
            console.log('‚úÖ Vite –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ\n');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Vite –∑–±—ñ—Ä–∫–∏:', error.message);
            process.exit(1);
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    validateFiles() {
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤...');
        
        let hasErrors = false;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –ø–ª–∞–≥—ñ–Ω–∞
        if (!fs.existsSync('catalog-master.php')) {
            console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –ø–ª–∞–≥—ñ–Ω–∞: catalog-master.php');
            hasErrors = true;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ Vite –∑–±—ñ—Ä–∫—É
        if (!fs.existsSync('assets/dist')) {
            console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –ø–∞–ø–∫–∞ assets/dist - –∑–∞–ø—É—Å—Ç—ñ—Ç—å npm run build');
            hasErrors = true;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞–ø–∫–∏
        const requiredDirs = ['includes'];
        requiredDirs.forEach(dir => {
            if (!fs.existsSync(dir)) {
                console.error(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –ø–∞–ø–∫–∞: ${dir}`);
                hasErrors = true;
            }
        });
        
        if (hasErrors) {
            console.error('\nüí• –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó. –ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞.');
            process.exit(1);
        }
        
        console.log('‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω–æ\n');
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –ø–ª–∞–≥—ñ–Ω–∞
    getPluginVersion() {
        try {
            const mainFile = fs.readFileSync('catalog-master.php', 'utf8');
            const versionMatch = mainFile.match(/Version:\s*(.+)/);
            if (versionMatch) {
                this.version = versionMatch[1].trim();
                console.log(`üìã –í–µ—Ä—Å—ñ—è –ø–ª–∞–≥—ñ–Ω–∞: ${this.version}`);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é –∑ —Ñ–∞–π–ª—É –ø–ª–∞–≥—ñ–Ω–∞');
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤–∏–∫–ª—é—á–µ–Ω—ñ
    shouldExclude(filePath) {
        const fileName = path.basename(filePath);
        const fileExtension = path.extname(filePath);
        const normalizedPath = filePath.replace(/\\/g, '/'); // Normalize path separators
        
        // Check exclude patterns
        const matchesPattern = this.excludePatterns.some(pattern => {
            if (pattern.includes('*')) {
                // –ü—Ä–æ—Å—Ç–∏–π wildcard matcher
                const regex = new RegExp(pattern.replace(/\*/g, '.*'));
                return regex.test(fileName);
            }
            
            // For ./dist only exclude root dist folder, not assets/dist
            if (pattern === './dist') {
                return normalizedPath === 'dist' || normalizedPath.startsWith('dist/');
            }
            
            // For other patterns, check if file path contains pattern
            return normalizedPath.includes(pattern);
        });
        
        // Check file extensions
        const matchesExtension = this.excludeExtensions.includes(fileExtension);
        
        if (matchesPattern || matchesExtension) {
            console.log(`  üö´ –í–∏–∫–ª—é—á–µ–Ω–æ: ${filePath}`);
        }
        
        return matchesPattern || matchesExtension;
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ –∞—Ä—Ö—ñ–≤—É
    addFilesToArchive(archive, dirPath, archivePath = '') {
        if (!fs.existsSync(dirPath)) {
            console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${dirPath}`);
            return;
        }
        
        const items = fs.readdirSync(dirPath);
        
        items.forEach(item => {
            const fullPath = path.join(dirPath, item);
            const relativePath = archivePath ? path.join(archivePath, item) : item;
            
            if (this.shouldExclude(fullPath)) {
                return;
            }
            
            const stats = fs.statSync(fullPath);
            
            if (stats.isDirectory()) {
                this.addFilesToArchive(archive, fullPath, relativePath);
            } else {
                archive.file(fullPath, { name: relativePath });
                console.log(`  üìÑ ${relativePath}`);
            }
        });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É
    async createArchive() {
        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
        const filename = `${this.pluginName}-v${this.version}-${timestamp}.zip`;
        const outputPath = path.join(this.outputDir, filename);
        
        console.log(`üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É: ${filename}\n`);
        
        return new Promise((resolve, reject) => {
            const output = fs.createWriteStream(outputPath);
            const archive = archiver('zip', {
                zlib: { level: 9 } // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è
            });
            
            output.on('close', () => {
                const sizeKB = (archive.pointer() / 1024).toFixed(2);
                console.log(`\n‚úÖ –ê—Ä—Ö—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
                console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);
                console.log(`üìä –†–æ–∑–º—ñ—Ä: ${sizeKB} KB`);
                resolve(outputPath);
            });
            
            archive.on('error', (err) => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É:', err);
                reject(err);
            });
            
            archive.pipe(output);
            
            // –î–æ–¥–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –∫–æ—Ä–µ–Ω—å –∞—Ä—Ö—ñ–≤—É –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –ø–∞–ø–∫–∏ –ø–ª–∞–≥—ñ–Ω–∞
            console.log('üìÅ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ –∞—Ä—Ö—ñ–≤—É:');
            
            // –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏
            this.includeFiles.forEach(file => {
                if (fs.existsSync(file)) {
                    archive.file(file, { name: `${this.pluginName}/${file}` });
                    console.log(`  üìÑ ${this.pluginName}/${file}`);
                }
            });
            
            // –î–æ–¥–∞—Ç–∏ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
            this.optionalFiles.forEach(file => {
                if (fs.existsSync(file)) {
                    archive.file(file, { name: `${this.pluginName}/${file}` });
                    console.log(`  üìÑ ${this.pluginName}/${file}` + ' (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)');
                }
            });
            
            // –î–æ–¥–∞—Ç–∏ –ø–∞–ø–∫–∏
            this.includeDirs.forEach(dir => {
                if (fs.existsSync(dir)) {
                    console.log(`  üìÅ ${this.pluginName}/${dir}/`);
                    this.addFilesToArchive(archive, dir, `${this.pluginName}/${dir}`);
                }
            });
            
            archive.finalize();
        });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–∫–æ–∂ –∫–æ–ø—ñ—ó –±–µ–∑ –≤–µ—Ä—Å—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    async createSimpleArchive() {
        const filename = `${this.pluginName}.zip`;
        const outputPath = path.join(this.outputDir, filename);
        
        console.log(`\nüì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞—Ä—Ö—ñ–≤—É: ${filename}`);
        
        return new Promise((resolve, reject) => {
            const output = fs.createWriteStream(outputPath);
            const archive = archiver('zip', {
                zlib: { level: 9 }
            });
            
            output.on('close', () => {
                console.log(`‚úÖ –ü—Ä–æ—Å—Ç–∏–π –∞—Ä—Ö—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${outputPath}`);
                resolve(outputPath);
            });
            
            archive.on('error', reject);
            archive.pipe(output);
            
            // –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏
            this.includeFiles.forEach(file => {
                if (fs.existsSync(file)) {
                    archive.file(file, { name: `${this.pluginName}/${file}` });
                }
            });
            
            // –î–æ–¥–∞—Ç–∏ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
            this.optionalFiles.forEach(file => {
                if (fs.existsSync(file)) {
                    archive.file(file, { name: `${this.pluginName}/${file}` });
                }
            });
            
            this.includeDirs.forEach(dir => {
                if (fs.existsSync(dir)) {
                    this.addFilesToArchive(archive, dir, `${this.pluginName}/${dir}`);
                }
            });
            
            archive.finalize();
        });
    }

    // –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–±—ñ—Ä–∫–∏
    async build() {
        try {
            console.log('üî® –ó–ë–Ü–†–ö–ê WORDPRESS –ü–õ–ê–ì–Ü–ù–ê CATALOG MASTER v1.1.5\n');
            console.log('=' .repeat(60));
            
            this.init();
            
            // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Vite –∑–±—ñ—Ä–∫—É
            this.runViteBuild();
            
            this.validateFiles();
            this.getPluginVersion();
            
            console.log(''); // –ü—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –∫—Ä–∞—Å–æ—Ç–∏
            
            // –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∞—Ä—Ö—ñ–≤ –∑ –≤–µ—Ä—Å—ñ—î—é
            const mainArchive = await this.createArchive();
            
            // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π –∞—Ä—Ö—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            await this.createSimpleArchive();
            
            console.log('\n' + '=' .repeat(60));
            console.log('üéâ –ó–ë–Ü–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!');
            console.log(`üìÅ –ê—Ä—Ö—ñ–≤–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ: ${this.outputDir}`);
            console.log('üöÄ –ü–ª–∞–≥—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ WordPress!');
            console.log(`üìä –í–µ—Ä—Å—ñ—è: ${this.version} (Vite Edition)`);
            
        } catch (error) {
            console.error('\nüí• –ü–û–ú–ò–õ–ö–ê –ó–ë–Ü–†–ö–ò:', error.message);
            process.exit(1);
        }
    }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
function checkDependencies() {
    try {
        require('archiver');
    } catch (error) {
        console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: archiver');
        console.log('üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: npm install archiver');
        process.exit(1);
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üî® WordPress Plugin Builder –¥–ª—è Catalog Master v1.1.5

–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
  node build-plugin.js [–æ–ø—Ü—ñ—ó]

–û–ü–¶–Ü–á:
  --help, -h     –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
  --version, -v  –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é —Å–∫—Ä–∏–ø—Ç–∞

–ü–†–ò–ö–õ–ê–î–ò:
  node build-plugin.js           # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ –ø–ª–∞–≥—ñ–Ω–∞
  npm run build:plugin           # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Å–ø–æ—Å—ñ–±

–ü–†–û–¶–ï–° –ó–ë–Ü–†–ö–ò:
  1. –ó–∞–ø—É—Å–∫ npm run build (Vite –∑–±—ñ—Ä–∫–∞)
  2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
  3. –í–∏–∫–ª—é—á–µ–Ω–Ω—è src —Ñ–∞–π–ª—ñ–≤ —Ç–∞ map —Ñ–∞–π–ª—ñ–≤
  4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è

–í–ò–•–Ü–î–ù–Ü –§–ê–ô–õ–ò:
  ./dist/catalog-master-v{–≤–µ—Ä—Å—ñ—è}-{–¥–∞—Ç–∞}.zip  # –û—Å–Ω–æ–≤–Ω–∏–π –∞—Ä—Ö—ñ–≤
  ./dist/catalog-master.zip                   # –ü—Ä–æ—Å—Ç–∏–π –∞—Ä—Ö—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

–í–ò–ú–û–ì–ò:
  ‚Ä¢ WordPress >= 5.6
  ‚Ä¢ PHP >= 7.2
  ‚Ä¢ ZipArchive, SimpleXML
  ‚Ä¢ Node.js >= 18 (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
`);
        return;
    }
    
    if (args.includes('--version') || args.includes('-v')) {
        console.log('WordPress Plugin Builder v1.1.5 (Vite Edition)');
        return;
    }
    
    checkDependencies();
    
    const builder = new WordPressPluginBuilder();
    await builder.build();
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WordPressPluginBuilder; 